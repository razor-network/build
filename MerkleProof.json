{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle trees (hash trees),","kind":"dev","methods":{},"version":1},"evm":{"assembly":"    /* \"openzeppelin-solidity/contracts/cryptography/MerkleProof.sol\":143:1278   */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-solidity/contracts/cryptography/MerkleProof.sol\":143:1278   */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201280efadb9c5511af6b861f427111c079c35c0c36ef5edb9ae3cd81173b14b4f64736f6c634300060b0033\n}\n","bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201280efadb9c5511af6b861f427111c079c35c0c36ef5edb9ae3cd81173b14b4f64736f6c634300060b0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT DUP1 0xEF 0xAD 0xB9 0xC5 MLOAD BYTE 0xF6 0xB8 PUSH2 0xF427 GT SHR SMOD SWAP13 CALLDATALOAD 0xC0 0xC3 PUSH15 0xF5EDB9AE3CD81173B14B4F64736F6C PUSH4 0x4300060B STOP CALLER ","sourceMap":"143:1135:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201280efadb9c5511af6b861f427111c079c35c0c36ef5edb9ae3cd81173b14b4f64736f6c634300060b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT DUP1 0xEF 0xAD 0xB9 0xC5 MLOAD BYTE 0xF6 0xB8 PUSH2 0xF427 GT SHR SMOD SWAP13 CALLDATALOAD 0xC0 0xC3 PUSH15 0xF5EDB9AE3CD81173B14B4F64736F6C PUSH4 0x4300060B STOP CALLER ","sourceMap":"143:1135:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"verify(bytes32[] memory,bytes32,bytes32)":"infinite"}},"legacyAssembly":{".code":[{"begin":143,"end":1278,"name":"PUSH #[$]","source":33,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":143,"end":1278,"name":"PUSH [$]","source":33,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"B"},{"begin":143,"end":1278,"name":"DUP3","source":33},{"begin":143,"end":1278,"name":"DUP3","source":33},{"begin":143,"end":1278,"name":"DUP3","source":33},{"begin":143,"end":1278,"name":"CODECOPY","source":33},{"begin":143,"end":1278,"name":"DUP1","source":33},{"begin":143,"end":1278,"name":"MLOAD","source":33},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"0"},{"begin":143,"end":1278,"name":"BYTE","source":33},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"73"},{"begin":143,"end":1278,"name":"EQ","source":33},{"begin":143,"end":1278,"name":"PUSH [tag]","source":33,"value":"1"},{"begin":143,"end":1278,"name":"JUMPI","source":33},{"begin":143,"end":1278,"name":"INVALID","source":33},{"begin":143,"end":1278,"name":"tag","source":33,"value":"1"},{"begin":143,"end":1278,"name":"JUMPDEST","source":33},{"begin":143,"end":1278,"name":"ADDRESS","source":33},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"0"},{"begin":143,"end":1278,"name":"MSTORE","source":33},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"73"},{"begin":143,"end":1278,"name":"DUP2","source":33},{"begin":143,"end":1278,"name":"MSTORE8","source":33},{"begin":143,"end":1278,"name":"DUP3","source":33},{"begin":143,"end":1278,"name":"DUP2","source":33},{"begin":143,"end":1278,"name":"RETURN","source":33}],".data":{"0":{".auxdata":"a26469706673582212201280efadb9c5511af6b861f427111c079c35c0c36ef5edb9ae3cd81173b14b4f64736f6c634300060b0033",".code":[{"begin":143,"end":1278,"name":"PUSHDEPLOYADDRESS","source":33},{"begin":143,"end":1278,"name":"ADDRESS","source":33},{"begin":143,"end":1278,"name":"EQ","source":33},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"80"},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"40"},{"begin":143,"end":1278,"name":"MSTORE","source":33},{"begin":143,"end":1278,"name":"PUSH","source":33,"value":"0"},{"begin":143,"end":1278,"name":"DUP1","source":33},{"begin":143,"end":1278,"name":"REVERT","source":33}]}}},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle trees (hash trees),\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x96a652802a06645a5908f74f104ec95ff0897e261e7028ee319bafc55582b597\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5afea8071316055c01a3d144da77523b8ae7ec8295e99559000cb07b23b98d30\",\"dweb:/ipfs/QmX14dHGgyErJb3R7wSNBSgxLdyX6EAVwJsZ6yK1xyG1Mo\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
