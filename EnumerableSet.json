{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.","kind":"dev","methods":{},"version":1},"evm":{"assembly":"    /* \"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\":724:7786   */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\":724:7786   */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f154f1c4f956dc5eda585639a2edaee18e2e052537962645c4f94e260fa925d664736f6c634300060b0033\n}\n","bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f154f1c4f956dc5eda585639a2edaee18e2e052537962645c4f94e260fa925d664736f6c634300060b0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL SLOAD CALL 0xC4 0xF9 JUMP 0xDC 0x5E 0xDA PC JUMP CODECOPY LOG2 0xED 0xAE 0xE1 DUP15 0x2E SDIV 0x25 CALLDATACOPY SWAP7 0x26 GASLIMIT 0xC4 0xF9 0x4E 0x26 0xF 0xA9 0x25 0xD6 PUSH5 0x736F6C6343 STOP MOD SIGNEXTEND STOP CALLER ","sourceMap":"724:7062:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f154f1c4f956dc5eda585639a2edaee18e2e052537962645c4f94e260fa925d664736f6c634300060b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL SLOAD CALL 0xC4 0xF9 JUMP 0xDC 0x5E 0xDA PC JUMP CODECOPY LOG2 0xED 0xAE 0xE1 DUP15 0x2E SDIV 0x25 CALLDATACOPY SWAP7 0x26 GASLIMIT 0xC4 0xF9 0x4E 0x26 0xF 0xA9 0x25 0xD6 PUSH5 0x736F6C6343 STOP MOD SIGNEXTEND STOP CALLER ","sourceMap":"724:7062:38:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite"}},"legacyAssembly":{".code":[{"begin":724,"end":7786,"name":"PUSH #[$]","source":38,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":724,"end":7786,"name":"PUSH [$]","source":38,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"B"},{"begin":724,"end":7786,"name":"DUP3","source":38},{"begin":724,"end":7786,"name":"DUP3","source":38},{"begin":724,"end":7786,"name":"DUP3","source":38},{"begin":724,"end":7786,"name":"CODECOPY","source":38},{"begin":724,"end":7786,"name":"DUP1","source":38},{"begin":724,"end":7786,"name":"MLOAD","source":38},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"0"},{"begin":724,"end":7786,"name":"BYTE","source":38},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"73"},{"begin":724,"end":7786,"name":"EQ","source":38},{"begin":724,"end":7786,"name":"PUSH [tag]","source":38,"value":"1"},{"begin":724,"end":7786,"name":"JUMPI","source":38},{"begin":724,"end":7786,"name":"INVALID","source":38},{"begin":724,"end":7786,"name":"tag","source":38,"value":"1"},{"begin":724,"end":7786,"name":"JUMPDEST","source":38},{"begin":724,"end":7786,"name":"ADDRESS","source":38},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"0"},{"begin":724,"end":7786,"name":"MSTORE","source":38},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"73"},{"begin":724,"end":7786,"name":"DUP2","source":38},{"begin":724,"end":7786,"name":"MSTORE8","source":38},{"begin":724,"end":7786,"name":"DUP3","source":38},{"begin":724,"end":7786,"name":"DUP2","source":38},{"begin":724,"end":7786,"name":"RETURN","source":38}],".data":{"0":{".auxdata":"a2646970667358221220f154f1c4f956dc5eda585639a2edaee18e2e052537962645c4f94e260fa925d664736f6c634300060b0033",".code":[{"begin":724,"end":7786,"name":"PUSHDEPLOYADDRESS","source":38},{"begin":724,"end":7786,"name":"ADDRESS","source":38},{"begin":724,"end":7786,"name":"EQ","source":38},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"80"},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"40"},{"begin":724,"end":7786,"name":"MSTORE","source":38},{"begin":724,"end":7786,"name":"PUSH","source":38,"value":"0"},{"begin":724,"end":7786,"name":"DUP1","source":38},{"begin":724,"end":7786,"name":"REVERT","source":38}]}}},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8651649cf0b9efa18c3b01c030276fa320d41adbdc286833417e7f36e357b2f3\",\"dweb:/ipfs/QmafhM2Nd1aP43QVB1eRRZaqRXQKswNfQcWi8U8xjrxCfN\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
